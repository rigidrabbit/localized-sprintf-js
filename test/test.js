/* global describe, it */

'use strict'

var assert = require('assert'),
    sprintfjs = require('../src/sprintf.js'),
    sprintf = sprintfjs.sprintf
var moment = require('moment')
require('moment/locale/en-ca')
require('moment/locale/fr')
require('moment/locale/zh-cn')
require('moment/locale/ko')

describe('sprintfjs', function() {
    var pi = 3.141592653589793

    it('should return formated strings for simple placeholders', function() {
        assert.equal('%', sprintf('%%'))
        assert.equal('10', sprintf('%b', 2))
        assert.equal('A', sprintf('%c', 65))
        assert.equal('2', sprintf('%d', 2))
        assert.equal('2', sprintf('%i', 2))
        assert.equal('2', sprintf('%d', '2'))
        assert.equal('2', sprintf('%i', '2'))
        assert.equal('{"foo":"bar"}', sprintf('%j', {foo: 'bar'}))
        assert.equal('["foo","bar"]', sprintf('%j', ['foo', 'bar']))
        assert.equal('2e+0', sprintf('%e', 2))
        assert.equal('2', sprintf('%u', 2))
        assert.equal('4294967294', sprintf('%u', -2))
        assert.equal('2.2', sprintf('%f', 2.2))
        assert.equal('3.141592653589793', sprintf('%g', pi))
        assert.equal('10', sprintf('%o', 8))
        assert.equal('37777777770', sprintf('%o', -8))
        assert.equal('%s', sprintf('%s', '%s'))
        assert.equal('ff', sprintf('%x', 255))
        assert.equal('ffffff01', sprintf('%x', -255))
        assert.equal('FF', sprintf('%X', 255))
        assert.equal('FFFFFF01', sprintf('%X', -255))
        assert.equal('Polly wants a cracker', sprintf('%2$s %3$s a %1$s', 'cracker', 'Polly', 'wants'))
        assert.equal('Hello world!', sprintf('Hello %(who)s!', {who: 'world'}))
        assert.equal('true', sprintf('%t', true))
        assert.equal('t', sprintf('%.1t', true))
        assert.equal('true', sprintf('%t', 'true'))
        assert.equal('true', sprintf('%t', 1))
        assert.equal('false', sprintf('%t', false))
        assert.equal('f', sprintf('%.1t', false))
        assert.equal('false', sprintf('%t', ''))
        assert.equal('false', sprintf('%t', 0))

        assert.equal('undefined', sprintf('%T', undefined))
        assert.equal('null', sprintf('%T', null))
        assert.equal('boolean', sprintf('%T', true))
        assert.equal('number', sprintf('%T', 42))
        assert.equal('string', sprintf('%T', 'This is a string'))
        assert.equal('function', sprintf('%T', Math.log))
        assert.equal('array', sprintf('%T', [1, 2, 3]))
        assert.equal('object', sprintf('%T', {foo: 'bar'}))
        assert.equal('regexp', sprintf('%T', /<('[^']*'|'[^']*'|[^''>])*>/))

        assert.equal('true', sprintf('%v', true))
        assert.equal('42', sprintf('%v', 42))
        assert.equal('This is a string', sprintf('%v', 'This is a string'))
        assert.equal('1,2,3', sprintf('%v', [1, 2, 3]))
        assert.equal('[object Object]', sprintf('%v', {foo: 'bar'}))
        assert.equal('/<("[^"]*"|\'[^\']*\'|[^\'">])*>/', sprintf('%v', /<("[^"]*"|'[^']*'|[^'">])*>/))
    })

    it('should return formated strings for complex placeholders', function() {
        // sign
        assert.equal('2', sprintf('%d', 2))
        assert.equal('-2', sprintf('%d', -2))
        assert.equal('+2', sprintf('%+d', 2))
        assert.equal('-2', sprintf('%+d', -2))
        assert.equal('2', sprintf('%i', 2))
        assert.equal('-2', sprintf('%i', -2))
        assert.equal('+2', sprintf('%+i', 2))
        assert.equal('-2', sprintf('%+i', -2))
        assert.equal('2.2', sprintf('%f', 2.2))
        assert.equal('-2.2', sprintf('%f', -2.2))
        assert.equal('+2.2', sprintf('%+f', 2.2))
        assert.equal('-2.2', sprintf('%+f', -2.2))
        assert.equal('-2.3', sprintf('%+.1f', -2.34))
        assert.equal('-0.0', sprintf('%+.1f', -0.01))
        assert.equal('3.14159', sprintf('%.6g', pi))
        assert.equal('3.14', sprintf('%.3g', pi))
        assert.equal('3', sprintf('%.1g', pi))
        assert.equal('-000000123', sprintf('%+010d', -123))
        assert.equal('______-123', sprintf("%+'_10d", -123))
        assert.equal('-234.34 123.2', sprintf('%f %f', -234.34, 123.2))
        assert.equal('-1.7976931348623157e+308 1.7976931348623157e+308', sprintf('%f %f', -Number.MAX_VALUE, Number.MAX_VALUE))
        assert.equal('-1.7976931348623157e+308 1.7976931348623157e+308', sprintf('%e %e', -Number.MAX_VALUE, Number.MAX_VALUE))
        assert.equal('-1.7976931348623157e+308 1.7976931348623157e+308', sprintf('%.3f %.3f', -Number.MAX_VALUE, Number.MAX_VALUE))
        assert.equal('-1.798e+308 1.798e+308', sprintf('%.3e %.3e', -Number.MAX_VALUE, Number.MAX_VALUE))

        // padding
        assert.equal('-0002', sprintf('%05d', -2))
        assert.equal('-0002', sprintf('%05i', -2))
        assert.equal('    <', sprintf('%5s', '<'))
        assert.equal('0000<', sprintf('%05s', '<'))
        assert.equal('____<', sprintf("%'_5s", '<'))
        assert.equal('>    ', sprintf('%-5s', '>'))
        assert.equal('>0000', sprintf('%0-5s', '>'))
        assert.equal('>____', sprintf("%'_-5s", '>'))
        assert.equal('xxxxxx', sprintf('%5s', 'xxxxxx'))
        assert.equal('1234', sprintf('%02u', 1234))
        assert.equal(' -10.235', sprintf('%8.3f', -10.23456))
        assert.equal('-12.34 xxx', sprintf('%f %s', -12.34, 'xxx'))
        assert.equal('{\n  "foo": "bar"\n}', sprintf('%2j', {foo: 'bar'}))
        assert.equal('[\n  "foo",\n  "bar"\n]', sprintf('%2j', ['foo', 'bar']))

        // precision
        assert.equal('2.3', sprintf('%.1f', 2.345))
        assert.equal('xxxxx', sprintf('%5.5s', 'xxxxxx'))
        assert.equal('    x', sprintf('%5.1s', 'xxxxxx'))

    })

    it('should return formated strings for callbacks', function() {
        assert.equal('foobar', sprintf('%s', function() { return 'foobar' }))
    })

    it('should return localized numbers with separators and currency symbols', function() {
        // NOTE: unfortunately the intl implementation of node.js is not perfect and
        // the expected results below are very different from the ones in major browsers.
        // thus, this test case might run failed in a future because of a possible improvements of
        // the intl implementation of node.js.
        var context = sprintfjs.localized({
            locale: 'en-US',
            currency: 'USD'
        })
        assert.equal('1,000,000', context.sprintf('%n', 1000000))
        assert.equal('1,000,000.0', context.sprintf('%.1n', 1000000))
        assert.equal('1,000,000.00', context.sprintf('%.2n', 1000000))
        assert.equal('1,000,000.000', context.sprintf('%.3n', 1000000))
        assert.equal('1,234,567.89', context.sprintf('%n', 1234567.89))
        assert.equal('$1,000,000.00', context.sprintf('%m', 1000000))
        assert.equal('$1,000,000', context.sprintf('%.0m', 1000000))
        assert.equal('$1,000,000.0', context.sprintf('%.1m', 1000000))
        assert.equal('$1,000,000.00', context.sprintf('%.2m', 1000000))
        assert.equal('$1,000,000.000', context.sprintf('%.3m', 1000000))
        assert.equal('$1,234,567.89', context.sprintf('%m', 1234567.89))
        assert.equal('$1,234,567', context.sprintf('%.0m', 1234567.89))
        assert.equal('$1,234,567.8', context.sprintf('%.1m', 1234567.89))
        assert.equal('$1,234,567.89', context.sprintf('%.2m', 1234567.89))
        assert.equal('$1,234,567.890', context.sprintf('%.3m', 1234567.89))
        assert.equal('-1,000,000', context.sprintf('%n', -1000000))
        assert.equal('-1,000,000.0', context.sprintf('%.1n', -1000000))
        assert.equal('-1,000,000.00', context.sprintf('%.2n', -1000000))
        assert.equal('-1,000,000.000', context.sprintf('%.3n', -1000000))
        assert.equal('-1,234,567.89', context.sprintf('%n', -1234567.89))
        assert.equal('-$1,000,000.00', context.sprintf('%m', -1000000))
        assert.equal('-$1,000,000', context.sprintf('%.0m', -1000000))
        assert.equal('-$1,000,000.0', context.sprintf('%.1m', -1000000))
        assert.equal('-$1,000,000.00', context.sprintf('%.2m', -1000000))
        assert.equal('-$1,000,000.000', context.sprintf('%.3m', -1000000))
        assert.equal('-$1,234,567.89', context.sprintf('%m', -1234567.89))
        assert.equal('-$1,234,567', context.sprintf('%.0m', -1234567.89))
        assert.equal('-$1,234,567.8', context.sprintf('%.1m', -1234567.89))
        assert.equal('-$1,234,567.89', context.sprintf('%.2m', -1234567.89))
        assert.equal('-$1,234,567.890', context.sprintf('%.3m', -1234567.89))
        assert.equal('0.001', context.sprintf('%n', 0.001))
        assert.equal('0', context.sprintf('%.0n', 0.001))
        assert.equal('0.0', context.sprintf('%.1n', 0.001))
        assert.equal('0.00', context.sprintf('%.2n', 0.001))
        assert.equal('0.001', context.sprintf('%.3n', 0.001))
        assert.equal('-0.001', context.sprintf('%n', -0.001))
        assert.equal('0', context.sprintf('%.0n', -0.001))
        assert.equal('0.0', context.sprintf('%.1n', -0.001))
        assert.equal('0.00', context.sprintf('%.2n', -0.001))
        assert.equal('-0.001', context.sprintf('%.3n', -0.001))
        assert.equal('$0.00', context.sprintf('%m', 0.001))
        assert.equal('$0', context.sprintf('%.0m', 0.001))
        assert.equal('$0.0', context.sprintf('%.1m', 0.001))
        assert.equal('$0.00', context.sprintf('%.2m', 0.001))
        assert.equal('$0.001', context.sprintf('%.3m', 0.001))
        assert.equal('-$0.00', context.sprintf('%m', -0.001))
        assert.equal('$0', context.sprintf('%.0m', -0.001))
        assert.equal('$0.0', context.sprintf('%.1m', -0.001))
        assert.equal('$0.00', context.sprintf('%.2m', -0.001))
        assert.equal('-$0.001', context.sprintf('%.3m', -0.001))
        assert.equal('9,999,999,999,999.99', context.sprintf('%n', 9999999999999.99))
        assert.equal('9,999,999,999,999', context.sprintf('%.0n', 9999999999999.99))
        assert.equal('9,999,999,999,999.9', context.sprintf('%.1n', 9999999999999.99))
        assert.equal('9,999,999,999,999.99', context.sprintf('%.2n', 9999999999999.99))
        assert.equal('9,999,999,999,999.990', context.sprintf('%.3n', 9999999999999.99))
        assert.equal('-9,999,999,999,999.99', context.sprintf('%n', -9999999999999.99))
        assert.equal('-9,999,999,999,999', context.sprintf('%.0n', -9999999999999.99))
        assert.equal('-9,999,999,999,999.9', context.sprintf('%.1n', -9999999999999.99))
        assert.equal('-9,999,999,999,999.99', context.sprintf('%.2n', -9999999999999.99))
        assert.equal('-9,999,999,999,999.990', context.sprintf('%.3n', -9999999999999.99))
        assert.equal('$9,999,999,999,999.99', context.sprintf('%m', 9999999999999.99))
        assert.equal('$9,999,999,999,999', context.sprintf('%.0m', 9999999999999.99))
        assert.equal('$9,999,999,999,999.9', context.sprintf('%.1m', 9999999999999.99))
        assert.equal('$9,999,999,999,999.99', context.sprintf('%.2m', 9999999999999.99))
        assert.equal('$9,999,999,999,999.990', context.sprintf('%.3m', 9999999999999.99))
        assert.equal('-$9,999,999,999,999.99', context.sprintf('%m', -9999999999999.99))
        assert.equal('-$9,999,999,999,999', context.sprintf('%.0m', -9999999999999.99))
        assert.equal('-$9,999,999,999,999.9', context.sprintf('%.1m', -9999999999999.99))
        assert.equal('-$9,999,999,999,999.99', context.sprintf('%.2m', -9999999999999.99))
        assert.equal('-$9,999,999,999,999.990', context.sprintf('%.3m', -9999999999999.99))
        assert.equal('9,007,199,254,740,991', context.sprintf('%n', Number.MAX_SAFE_INTEGER))
        assert.equal('9,007,199,254,740,991', context.sprintf('%.0n', Number.MAX_SAFE_INTEGER))
        assert.equal('9,007,199,254,740,991.0', context.sprintf('%.1n', Number.MAX_SAFE_INTEGER))
        assert.equal('9,007,199,254,740,991.00', context.sprintf('%.2n', Number.MAX_SAFE_INTEGER))
        assert.equal('9,007,199,254,740,991.000', context.sprintf('%.3n', Number.MAX_SAFE_INTEGER))
        assert.equal('-9,007,199,254,740,991', context.sprintf('%n', -Number.MAX_SAFE_INTEGER))
        assert.equal('-9,007,199,254,740,991', context.sprintf('%.0n', -Number.MAX_SAFE_INTEGER))
        assert.equal('-9,007,199,254,740,991.0', context.sprintf('%.1n', -Number.MAX_SAFE_INTEGER))
        assert.equal('-9,007,199,254,740,991.00', context.sprintf('%.2n', -Number.MAX_SAFE_INTEGER))
        assert.equal('-9,007,199,254,740,991.000', context.sprintf('%.3n', -Number.MAX_SAFE_INTEGER))
        assert.equal('$9,007,199,254,740,991.00', context.sprintf('%m', Number.MAX_SAFE_INTEGER))
        assert.equal('$9,007,199,254,740,991', context.sprintf('%.0m', Number.MAX_SAFE_INTEGER))
        assert.equal('$9,007,199,254,740,991.0', context.sprintf('%.1m', Number.MAX_SAFE_INTEGER))
        assert.equal('$9,007,199,254,740,991.00', context.sprintf('%.2m', Number.MAX_SAFE_INTEGER))
        assert.equal('$9,007,199,254,740,991.000', context.sprintf('%.3m', Number.MAX_SAFE_INTEGER))
        assert.equal('-$9,007,199,254,740,991.00', context.sprintf('%m', -Number.MAX_SAFE_INTEGER))
        assert.equal('-$9,007,199,254,740,991', context.sprintf('%.0m', -Number.MAX_SAFE_INTEGER))
        assert.equal('-$9,007,199,254,740,991.0', context.sprintf('%.1m', -Number.MAX_SAFE_INTEGER))
        assert.equal('-$9,007,199,254,740,991.00', context.sprintf('%.2m', -Number.MAX_SAFE_INTEGER))
        assert.equal('-$9,007,199,254,740,991.000', context.sprintf('%.3m', -Number.MAX_SAFE_INTEGER))

        context.locale('en-UK')
        context.currency('GBP')
        assert.equal('1,000,000', context.sprintf('%n', 1000000))
        assert.equal('1,234,567.89', context.sprintf('%n', 1234567.89))
        assert.equal('£1,000,000.00', context.sprintf('%m', 1000000))
        assert.equal('£1,234,567.89', context.sprintf('%m', 1234567.89))

        assert.equal('-1,000,000', context.sprintf('%n', -1000000))
        assert.equal('-1,234,567.89', context.sprintf('%n', -1234567.89))
        assert.equal('-£1,000,000.00', context.sprintf('%m', -1000000))
        assert.equal('-£1,234,567.89', context.sprintf('%m', -1234567.89))

        context.locale('de')
        context.currency('EUR')
        assert.equal('1,000,000', context.sprintf('%n', 1000000))
        assert.equal('1,234,567.89', context.sprintf('%n', 1234567.89))
        assert.equal('€ 1,000,000.00', context.sprintf('%m', 1000000))
        assert.equal('€ 1,234,567.89', context.sprintf('%m', 1234567.89))

        assert.equal('-1,000,000', context.sprintf('%n', -1000000))
        assert.equal('-1,234,567.89', context.sprintf('%n', -1234567.89))
        assert.equal('-€ 1,000,000.00', context.sprintf('%m', -1000000))
        assert.equal('-€ 1,234,567.89', context.sprintf('%m', -1234567.89))

        context.locale('fr')
        assert.equal('1,000,000', context.sprintf('%n', 1000000))
        assert.equal('1,234,567.89', context.sprintf('%n', 1234567.89))
        assert.equal('€ 1,000,000.00', context.sprintf('%m', 1000000))
        assert.equal('€ 1,234,567.89', context.sprintf('%m', 1234567.89))

        context.locale('es')
        assert.equal('1,000,000', context.sprintf('%n', 1000000))
        assert.equal('1,234,567.89', context.sprintf('%n', 1234567.89))
        assert.equal('€ 1,000,000.00', context.sprintf('%m', 1000000))
        assert.equal('€ 1,234,567.89', context.sprintf('%m', 1234567.89))

        context.locale('zh')
        context.currency('CNY')
        assert.equal('1,000,000', context.sprintf('%n', 1000000))
        assert.equal('1,234,567.89', context.sprintf('%n', 1234567.89))
        assert.equal('CN¥ 1,000,000.00', context.sprintf('%m', 1000000))
        assert.equal('CN¥ 1,234,567.89', context.sprintf('%m', 1234567.89))

        context.locale('ko')
        context.currency('KRW')
        assert.equal('1,000,000', context.sprintf('%n', 1000000))
        assert.equal('1,234,567.89', context.sprintf('%n', 1234567.89))
        assert.equal('₩ 1,000,000', context.sprintf('%m', 1000000))
        assert.equal('₩ 1,234,568', context.sprintf('%m', 1234567.89))

        context.locale('ja')
        context.currency('JPY')
        assert.equal('1,000,000', context.sprintf('%n', 1000000))
        assert.equal('1,000,000.0', context.sprintf('%.1n', 1000000))
        assert.equal('1,000,000.00', context.sprintf('%.2n', 1000000))
        assert.equal('1,000,000.000', context.sprintf('%.3n', 1000000))
        assert.equal('1,234,567.89', context.sprintf('%n', 1234567.89))
        assert.equal('JP¥ 1,000,000', context.sprintf('%m', 1000000))
        assert.equal('JP¥ 1,000,000', context.sprintf('%.0m', 1000000))
        assert.equal('JP¥ 1,000,000.0', context.sprintf('%.1m', 1000000))
        assert.equal('JP¥ 1,000,000.00', context.sprintf('%.2m', 1000000))
        assert.equal('JP¥ 1,000,000.000', context.sprintf('%.3m', 1000000))
        assert.equal('JP¥ 1,234,568', context.sprintf('%m', 1234567.89))
        assert.equal('JP¥ 1,234,567', context.sprintf('%.0m', 1234567.89))
        assert.equal('JP¥ 1,234,567.8', context.sprintf('%.1m', 1234567.89))
        assert.equal('JP¥ 1,234,567.89', context.sprintf('%.2m', 1234567.89))
        assert.equal('JP¥ 1,234,567.890', context.sprintf('%.3m', 1234567.89))
        assert.equal('-1,000,000', context.sprintf('%n', -1000000))
        assert.equal('-1,000,000.0', context.sprintf('%.1n', -1000000))
        assert.equal('-1,000,000.00', context.sprintf('%.2n', -1000000))
        assert.equal('-1,000,000.000', context.sprintf('%.3n', -1000000))
        assert.equal('-1,234,567.89', context.sprintf('%n', -1234567.89))
        assert.equal('-JP¥ 1,000,000', context.sprintf('%m', -1000000))
        assert.equal('-JP¥ 1,000,000', context.sprintf('%.0m', -1000000))
        assert.equal('-JP¥ 1,000,000.0', context.sprintf('%.1m', -1000000))
        assert.equal('-JP¥ 1,000,000.00', context.sprintf('%.2m', -1000000))
        assert.equal('-JP¥ 1,000,000.000', context.sprintf('%.3m', -1000000))
        assert.equal('-JP¥ 1,234,568', context.sprintf('%m', -1234567.89))
        assert.equal('-JP¥ 1,234,567', context.sprintf('%.0m', -1234567.89))
        assert.equal('-JP¥ 1,234,567.8', context.sprintf('%.1m', -1234567.89))
        assert.equal('-JP¥ 1,234,567.89', context.sprintf('%.2m', -1234567.89))
        assert.equal('-JP¥ 1,234,567.890', context.sprintf('%.3m', -1234567.89))
        assert.equal('0.001', context.sprintf('%n', 0.001))
        assert.equal('0', context.sprintf('%.0n', 0.001))
        assert.equal('0.0', context.sprintf('%.1n', 0.001))
        assert.equal('0.00', context.sprintf('%.2n', 0.001))
        assert.equal('0.001', context.sprintf('%.3n', 0.001))
        assert.equal('-0.001', context.sprintf('%n', -0.001))
        assert.equal('0', context.sprintf('%.0n', -0.001))
        assert.equal('0.0', context.sprintf('%.1n', -0.001))
        assert.equal('0.00', context.sprintf('%.2n', -0.001))
        assert.equal('-0.001', context.sprintf('%.3n', -0.001))
        assert.equal('JP¥ 0', context.sprintf('%m', 0.001))
        assert.equal('JP¥ 0', context.sprintf('%.0m', 0.001))
        assert.equal('JP¥ 0.0', context.sprintf('%.1m', 0.001))
        assert.equal('JP¥ 0.00', context.sprintf('%.2m', 0.001))
        assert.equal('JP¥ 0.001', context.sprintf('%.3m', 0.001))
        assert.equal('-JP¥ 0', context.sprintf('%m', -0.001))
        assert.equal('JP¥ 0', context.sprintf('%.0m', -0.001))
        assert.equal('JP¥ 0.0', context.sprintf('%.1m', -0.001))
        assert.equal('JP¥ 0.00', context.sprintf('%.2m', -0.001))
        assert.equal('-JP¥ 0.001', context.sprintf('%.3m', -0.001))
        assert.equal('9,999,999,999,999.99', context.sprintf('%n', 9999999999999.99))
        assert.equal('9,999,999,999,999', context.sprintf('%.0n', 9999999999999.99))
        assert.equal('9,999,999,999,999.9', context.sprintf('%.1n', 9999999999999.99))
        assert.equal('9,999,999,999,999.99', context.sprintf('%.2n', 9999999999999.99))
        assert.equal('9,999,999,999,999.990', context.sprintf('%.3n', 9999999999999.99))
        assert.equal('-9,999,999,999,999.99', context.sprintf('%n', -9999999999999.99))
        assert.equal('-9,999,999,999,999', context.sprintf('%.0n', -9999999999999.99))
        assert.equal('-9,999,999,999,999.9', context.sprintf('%.1n', -9999999999999.99))
        assert.equal('-9,999,999,999,999.99', context.sprintf('%.2n', -9999999999999.99))
        assert.equal('-9,999,999,999,999.990', context.sprintf('%.3n', -9999999999999.99))
        assert.equal('JP¥ 10,000,000,000,000', context.sprintf('%m', 9999999999999.99))
        assert.equal('JP¥ 9,999,999,999,999', context.sprintf('%.0m', 9999999999999.99))
        assert.equal('JP¥ 9,999,999,999,999.9', context.sprintf('%.1m', 9999999999999.99))
        assert.equal('JP¥ 9,999,999,999,999.99', context.sprintf('%.2m', 9999999999999.99))
        assert.equal('JP¥ 9,999,999,999,999.990', context.sprintf('%.3m', 9999999999999.99))
        assert.equal('-JP¥ 10,000,000,000,000', context.sprintf('%m', -9999999999999.99))
        assert.equal('-JP¥ 9,999,999,999,999', context.sprintf('%.0m', -9999999999999.99))
        assert.equal('-JP¥ 9,999,999,999,999.9', context.sprintf('%.1m', -9999999999999.99))
        assert.equal('-JP¥ 9,999,999,999,999.99', context.sprintf('%.2m', -9999999999999.99))
        assert.equal('-JP¥ 9,999,999,999,999.990', context.sprintf('%.3m', -9999999999999.99))
    })

    it('should return localized date time representations', function() {
        var context = sprintfjs.localized({
            locale: 'en',
            moment: moment
        })
        assert.equal('9:34 PM', context.sprintf('%l', '2019-12-31 21:34:56.789'))
        assert.equal('9:34 PM', context.sprintf('%.0l', '2019-12-31 21:34:56.789'))
        assert.equal('12/31/2019', context.sprintf('%.1l', '2019-12-31 21:34:56.789'))
        assert.equal('Dec 31, 2019', context.sprintf('%.2l', '2019-12-31 21:34:56.789'))
        assert.equal('Dec 31, 2019 9:34 PM', context.sprintf('%.3l', '2019-12-31 21:34:56.789'))
        assert.equal('Tue, Dec 31, 2019 9:34 PM', context.sprintf('%.4l', '2019-12-31 21:34:56.789'))
        assert.equal('9:34:56 PM', context.sprintf('%L', '2019-12-31 21:34:56.789'))
        assert.equal('9:34:56 PM', context.sprintf('%.0L', '2019-12-31 21:34:56.789'))
        assert.equal('12/31/2019', context.sprintf('%.1L', '2019-12-31 21:34:56.789'))
        assert.equal('December 31, 2019', context.sprintf('%.2L', '2019-12-31 21:34:56.789'))
        assert.equal('December 31, 2019 9:34 PM', context.sprintf('%.3L', '2019-12-31 21:34:56.789'))
        assert.equal('Tuesday, December 31, 2019 9:34 PM', context.sprintf('%.4L', '2019-12-31 21:34:56.789'))

        context.locale('en-ca')
        assert.equal('9:34 PM', context.sprintf('%l', '2019-12-31 21:34:56.789'))
        assert.equal('9:34 PM', context.sprintf('%.0l', '2019-12-31 21:34:56.789'))
        assert.equal('2019-12-31', context.sprintf('%.1l', '2019-12-31 21:34:56.789'))
        assert.equal('Dec 31, 2019', context.sprintf('%.2l', '2019-12-31 21:34:56.789'))
        assert.equal('Dec 31, 2019 9:34 PM', context.sprintf('%.3l', '2019-12-31 21:34:56.789'))
        assert.equal('Tue, Dec 31, 2019 9:34 PM', context.sprintf('%.4l', '2019-12-31 21:34:56.789'))
        assert.equal('9:34:56 PM', context.sprintf('%L', '2019-12-31 21:34:56.789'))
        assert.equal('9:34:56 PM', context.sprintf('%.0L', '2019-12-31 21:34:56.789'))
        assert.equal('2019-12-31', context.sprintf('%.1L', '2019-12-31 21:34:56.789'))
        assert.equal('December 31, 2019', context.sprintf('%.2L', '2019-12-31 21:34:56.789'))
        assert.equal('December 31, 2019 9:34 PM', context.sprintf('%.3L', '2019-12-31 21:34:56.789'))
        assert.equal('Tuesday, December 31, 2019 9:34 PM', context.sprintf('%.4L', '2019-12-31 21:34:56.789'))

        context.locale('fr')
        assert.equal('21:34', context.sprintf('%l', '2019-12-31 21:34:56.789'))
        assert.equal('21:34', context.sprintf('%.0l', '2019-12-31 21:34:56.789'))
        assert.equal('31/12/2019', context.sprintf('%.1l', '2019-12-31 21:34:56.789'))
        assert.equal('31 déc. 2019', context.sprintf('%.2l', '2019-12-31 21:34:56.789'))
        assert.equal('31 déc. 2019 21:34', context.sprintf('%.3l', '2019-12-31 21:34:56.789'))
        assert.equal('mar. 31 déc. 2019 21:34', context.sprintf('%.4l', '2019-12-31 21:34:56.789'))
        assert.equal('21:34:56', context.sprintf('%L', '2019-12-31 21:34:56.789'))
        assert.equal('21:34:56', context.sprintf('%.0L', '2019-12-31 21:34:56.789'))
        assert.equal('31/12/2019', context.sprintf('%.1L', '2019-12-31 21:34:56.789'))
        assert.equal('31 décembre 2019', context.sprintf('%.2L', '2019-12-31 21:34:56.789'))
        assert.equal('31 décembre 2019 21:34', context.sprintf('%.3L', '2019-12-31 21:34:56.789'))
        assert.equal('mardi 31 décembre 2019 21:34', context.sprintf('%.4L', '2019-12-31 21:34:56.789'))

        context.locale('es')
        assert.equal('21:34', context.sprintf('%l', '2019-12-31 21:34:56.789'))
        assert.equal('21:34', context.sprintf('%.0l', '2019-12-31 21:34:56.789'))
        assert.equal('31/12/2019', context.sprintf('%.1l', '2019-12-31 21:34:56.789'))
        assert.equal('31 de dic. de 2019', context.sprintf('%.2l', '2019-12-31 21:34:56.789'))
        assert.equal('31 de dic. de 2019 21:34', context.sprintf('%.3l', '2019-12-31 21:34:56.789'))
        assert.equal('mar., 31 de dic. de 2019 21:34', context.sprintf('%.4l', '2019-12-31 21:34:56.789'))
        assert.equal('21:34:56', context.sprintf('%L', '2019-12-31 21:34:56.789'))
        assert.equal('21:34:56', context.sprintf('%.0L', '2019-12-31 21:34:56.789'))
        assert.equal('31/12/2019', context.sprintf('%.1L', '2019-12-31 21:34:56.789'))
        assert.equal('31 de diciembre de 2019', context.sprintf('%.2L', '2019-12-31 21:34:56.789'))
        assert.equal('31 de diciembre de 2019 21:34', context.sprintf('%.3L', '2019-12-31 21:34:56.789'))
        assert.equal('martes, 31 de diciembre de 2019 21:34', context.sprintf('%.4L', '2019-12-31 21:34:56.789'))

        context.locale('zh-cn')
        assert.equal('21:34', context.sprintf('%l', '2019-12-31 21:34:56.789'))
        assert.equal('21:34', context.sprintf('%.0l', '2019-12-31 21:34:56.789'))
        assert.equal('2019/12/31', context.sprintf('%.1l', '2019-12-31 21:34:56.789'))
        assert.equal('2019年12月31日', context.sprintf('%.2l', '2019-12-31 21:34:56.789'))
        assert.equal('2019年12月31日 21:34', context.sprintf('%.3l', '2019-12-31 21:34:56.789'))
        assert.equal('2019年12月31日星期二 21:34', context.sprintf('%.4l', '2019-12-31 21:34:56.789'))
        assert.equal('21:34:56', context.sprintf('%L', '2019-12-31 21:34:56.789'))
        assert.equal('21:34:56', context.sprintf('%.0L', '2019-12-31 21:34:56.789'))
        assert.equal('2019/12/31', context.sprintf('%.1L', '2019-12-31 21:34:56.789'))
        assert.equal('2019年12月31日', context.sprintf('%.2L', '2019-12-31 21:34:56.789'))
        assert.equal('2019年12月31日晚上9点34分', context.sprintf('%.3L', '2019-12-31 21:34:56.789'))
        assert.equal('2019年12月31日星期二晚上9点34分', context.sprintf('%.4L', '2019-12-31 21:34:56.789'))

        context.locale('ko')
        assert.equal('오후 9:34', context.sprintf('%l', '2019-12-31 21:34:56.789'))
        assert.equal('오후 9:34', context.sprintf('%.0l', '2019-12-31 21:34:56.789'))
        assert.equal('2019.12.31.', context.sprintf('%.1l', '2019-12-31 21:34:56.789'))
        assert.equal('2019년 12월 31일', context.sprintf('%.2l', '2019-12-31 21:34:56.789'))
        assert.equal('2019년 12월 31일 오후 9:34', context.sprintf('%.3l', '2019-12-31 21:34:56.789'))
        assert.equal('2019년 12월 31일 화요일 오후 9:34', context.sprintf('%.4l', '2019-12-31 21:34:56.789'))
        assert.equal('오후 9:34:56', context.sprintf('%L', '2019-12-31 21:34:56.789'))
        assert.equal('오후 9:34:56', context.sprintf('%.0L', '2019-12-31 21:34:56.789'))
        assert.equal('2019.12.31.', context.sprintf('%.1L', '2019-12-31 21:34:56.789'))
        assert.equal('2019년 12월 31일', context.sprintf('%.2L', '2019-12-31 21:34:56.789'))
        assert.equal('2019년 12월 31일 오후 9:34', context.sprintf('%.3L', '2019-12-31 21:34:56.789'))
        assert.equal('2019년 12월 31일 화요일 오후 9:34', context.sprintf('%.4L', '2019-12-31 21:34:56.789'))

        context.locale('ja')
        assert.equal('21:34', context.sprintf('%l', '2019-12-31 21:34:56.789'))
        assert.equal('21:34', context.sprintf('%.0l', '2019-12-31 21:34:56.789'))
        assert.equal('2019/12/31', context.sprintf('%.1l', '2019-12-31 21:34:56.789'))
        assert.equal('2019年12月31日', context.sprintf('%.2l', '2019-12-31 21:34:56.789'))
        assert.equal('2019年12月31日 21:34', context.sprintf('%.3l', '2019-12-31 21:34:56.789'))
        assert.equal('2019年12月31日(火) 21:34', context.sprintf('%.4l', '2019-12-31 21:34:56.789'))
        assert.equal('21:34:56', context.sprintf('%L', '2019-12-31 21:34:56.789'))
        assert.equal('21:34:56', context.sprintf('%.0L', '2019-12-31 21:34:56.789'))
        assert.equal('2019/12/31', context.sprintf('%.1L', '2019-12-31 21:34:56.789'))
        assert.equal('2019年12月31日', context.sprintf('%.2L', '2019-12-31 21:34:56.789'))
        assert.equal('2019年12月31日 21:34', context.sprintf('%.3L', '2019-12-31 21:34:56.789'))
        assert.equal('2019年12月31日 火曜日 21:34', context.sprintf('%.4L', '2019-12-31 21:34:56.789'))
    })
})
